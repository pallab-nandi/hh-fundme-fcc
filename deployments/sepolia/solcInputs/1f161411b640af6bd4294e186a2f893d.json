{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum funding value in USD\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConvertor.sol\";\n\nerror Unauthorized();\nerror TransactionFailed();\n\ncontract FundMe {\n    using PriceConvertor for uint256;\n\n    uint256 public constant minUSD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmount;\n\n    address public immutable owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // Want to be able to set a minimum fund amount in USD\n        // require(msg.value.getConversionRate() >= minUSD, \"Didn't send enough!\"); // 1e18 == 1 * 10 ** 18\n        if (msg.value.getConversionRate(priceFeed) < minUSD) {\n            revert TransactionFailed();\n        }\n        funders.push(msg.sender);\n        addressToAmount[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmount[funder] = 0;\n        }\n\n        // reset array\n        funders = new address[](0);\n\n        // withdraw the amount from the contract\n\n        /*\n        // transfer\n        payable(msg.sender).transfer(address(this).balance);\n\n        // send\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        require(sendSuccess, \"Send failed!\");\n        */\n\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        // require(callSuccess, \"Call Failed!\");\n        if (!callSuccess) {\n            revert TransactionFailed();\n        }\n\n        // msg.sender -> address\n        // payable(msg.sender) -> payable address\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == owner, \"Not an owner\");\n        if (msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        // ABI\n        // Address - 0x694AA1769357215DE4FAC081bf1f309aDC325306\n\n        /* AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\n        ); */\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // Returns int with 8 decimal values\n        // type casting in uint256 and converting to 18 decimal places as msg.value is!\n\n        return uint256(price * 1e10);\n    }\n\n    function getVersion(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        /* AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\n        ); */\n        return priceFeed.version();\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUSD;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}